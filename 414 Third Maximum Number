/*

Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).

Example 1:

Input: [3, 2, 1]

Output: 1

Explanation: The third maximum is 1.
Example 2:

Input: [1, 2]

Output: 2

Explanation: The third maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: [2, 2, 3, 1]

Output: 1

Explanation: Note that the third maximum here means the third maximum distinct number.
Both numbers with value 2 are both considered as second maximum.

*/

//Soluiton 1 a bad solution
class Solution {
    public int thirdMax(int[] nums) {
        if(nums.length == 0) return 0;
        Arrays.sort(nums);
        List<Integer> count = new ArrayList<Integer>();
        int i = 0;
        for(int num : nums){
            if(i == 0){
                count.add(num);
                i++;
            } else if(num != count.get(i - 1)){
                count.add(num);
                i++;
            }
        }
        if(i < 3){
            return count.get(count.size() - 1);
        } else{
            return count.get(count.size() - 3);
        }
    }
}

//Solution 2  int不行 可以有long啊
class Solution {
    public int thirdMax(int[] nums) {
       long max=Long.MIN_VALUE;
        long second=Long.MIN_VALUE;
        long third=Long.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>=max){
                if(nums[i]>max){
                    third=second;
                    second=max;
                    max=nums[i];
                }
            }
            else if(nums[i]>=second){
                if(nums[i]>second){
                    third=second;
                    second=nums[i];
                } 
            }
            else if(nums[i]>=third){
                if(nums[i]>third)
                    third=nums[i];
            }
        }
        if(third==Long.MIN_VALUE)
            return (int)max;
        return (int)third;
    }
}
