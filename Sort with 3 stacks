class Solution {
 public:
  void sort(Deque<Integer> s1) {
    Deque<Integer> s2 = new LinkedList<>();
    Deque<Integer> s3 = new LinkedList<>();
    // Write your solution here.
    helper(s1, s2, s3, s1.size());
  }
  private void helper(Deque<Integer> s1, Deque<Integer> s2, Deque<Integer> s3, int length) {
      if(length <= 1) {
          return;
      }
      int mid1 = s1.size() / 2;
      int mid2 = s1.size() - mid1;
      for(int i = 0; i < mid1; i++) {
          s2.offerFirst(s1.pollFirst());
      }
      sort(s1, s2, s3, mid1);
      sort(s1, s2, s3, mid2);
      int i = 0;
      int j = 0;
      while(i < mid1 && j < mid2) {
          if(s1.peekFirst() < s2.peekFirst()) {
              j++;
              s3.offerFirst(s1.pollFirst());
          } else {
              i++;
              s3.offerFirst(s2.pollFirst());
          }
      }
      while(i < mid1) {
          i++;
          s3.offerFirst(s2.pollFirst());
      }
      while(j < mid2) {
          j++;
          s3.offerFirst(s1.pollFirst());
      }
      while(int k = 0; k < s3.size(); k++) {
          s1.offerFirst(s3.pollFirst());
      }
  }
};
