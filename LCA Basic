# Given two nodes in a binary tree, find their lowest common ancestor.

# Assumptions

# There is no parent pointer for the nodes in the binary tree
# The given two nodes are guaranteed to be in the binary tree


public TreeNode lowestCommonAncestor(TreeNode root,
      TreeNode a, TreeNode b) {
    // Write your solution here.
    if(root == null) {
      return root;
    }
    if(root == a || root == b) {
        return root;
    }
    TreeNode left = lowestCommonAncestor(root.left, a, b);
    TreeNode right = lowestCommonAncestor(root.right, a, b);
    if(left != null && right != null) {
       return root;
    } else if (left == null) {
       return right;
    } else {
       return left;
    }
  }
  
# Given two nodes in a binary tree, find their lowest common ancestor.

# Assumptions

# There is parent pointer for the nodes in the binary tree
# The given two nodes are NOT guaranteed to be in the binary tree

/**
 * public class TreeNodeP {
 *   public int key;
 *   public TreeNodeP left;
 *   public TreeNodeP right;
 *   public TreeNodeP parent;
 *   public TreeNodeP(int key, TreeNodeP parent) {
 *     this.key = key;
 *     this.parent = parent;
 *   }
 * }
 */
public class Solution {
  public TreeNodeP lowestCommonAncestor(TreeNodeP one, TreeNodeP two) {
    // Write your solution here.
    int l1 = length(one);
    int l2 = length(two);
    if (l1 <= l2) {
       return mergeNode(one, two, l2 - l1);
    } else {
       return mergeNode(two, one, l1 - l2);
    }
  }

  private int length(TreeNodeP node) {
     int len = 0;
     while(node != null) {
         len++;
         node = node.parent;
     }
     return len;
  }

  private TreeNodeP mergeNode(TreeNodeP node1, TreeNodeP node2, int len) {
     while(len > 0) {
         node2 = node2.parent;
         len--;
     }
     while(node1 != node2) {
        node1 = node1.parent;
        node2 = node2.parent;
     }
     return node1;
  }
}
