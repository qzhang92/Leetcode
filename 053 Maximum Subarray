/*
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
*/

//O(n) solution,
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        int max = Integer.MIN_VALUE;
        int currentSum = 0;
        for(int i = 0; i < nums.length; i++){
            currentSum = currentSum + nums[i];
            if(currentSum < nums[i]){
                currentSum = nums[i];
            }
            if(max < currentSum){
                max = currentSum;
            }
        }
        return max;
    }
}

//Solution 2 Divide & Conquer
class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        return counstructfunction(nums, 0, nums.length - 1);
    }
    private int counstructfunction(int[] num, int low, int high){
        if(low == high){
            return num[low];
        }
        int mid = low + (high - low) / 2;
        int left = counstructfunction(num, low, mid);
        int right = counstructfunction(num, mid + 1, high);
        int cross = anotherfunction(num, low, mid, high);
        if(left >= right && left >= cross){
            return left;
        }else if(right >= left && right >= cross){
            return right;
        } else{
            return cross;
        }
    }
    private int anotherfunction(int[] num1, int low, int mid, int high){
        int sum = 0;
        int leftsum = Integer.MIN_VALUE;
        for(int i = mid; i >= low; i--){
            sum += num1[i];
            if(sum > leftsum){
                leftsum = sum;
            }
        }
        sum = 0;
        int rightsum = Integer.MIN_VALUE;
        for(int i = mid + 1; i <= high; i++){
            sum += num1[i];
            if(sum > rightsum){
                rightsum = sum;
            }
        }
        return leftsum + rightsum;
    }
}
