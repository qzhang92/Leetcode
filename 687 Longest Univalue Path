/*

Given a binary tree, find the length of the longest path where each node in the path has the same value. This path may or may not pass through the root.

Note: The length of path between two nodes is represented by the number of edges between them.

Example 1:

Input:

              5
             / \
            4   5
           / \   \
          1   1   5
Output:

2
Example 2:

Input:

              1
             / \
            4   5
           / \   \
          4   4   5
Output:

2

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int result;
    public int longestUnivaluePath(TreeNode root) {
        if(root == null) return 0;
        result = 0;
        helper(root);
        return result;
    }
    private int helper(TreeNode root){
        if(root == null) return 0;
        int left = helper(root.left);
        int right = helper(root.right);
        int left1 = 0; 
        int right1 = 0;
        if(root.left != null && root.left.val == root.val){
            left1 =  left + 1;
        }
        if(root.right != null && root.right.val == root.val){
            right1 =  right + 1;
        }
        result = Math.max(result, left1 + right1);
        return Math.max(left1, right1);
    }
}
