/*

Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 
For example:
Given BST [1,null,2,2],
   1
    \
     2
    /
   2
 
return [2].
Note: If a tree has more than one mode, you can return them in any order.
Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int[] findMode(TreeNode root) {
        if(root == null) return new int[0];
        Stack<TreeNode> res = new Stack<>();
        res.push(root);
        int current = 0;
        Map<Integer, Integer> ans = new HashMap<Integer, Integer>();
        while(!res.isEmpty()){
            TreeNode node = res.pop();
            if(node == null) continue;
            if(ans.containsKey(node.val)){
                int a1 = node.val;
                int a2 = ans.get(node.val) + 1;
                ans.put(a1, a2);
                if(current < a2){
                    current = a2;
                }
            } else{
                ans.put(node.val, 1);
                if(current == 0){
                    current = 1;
                }
            }
            res.push(node.right);
            res.push(node.left);
        }
        ArrayList<Integer> result = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry : ans.entrySet()){
            if(entry.getValue() == current){
                result.add(entry.getKey());
            }
        }
        int[] fresult = new int[result.size()];
        for(int i = 0; i < fresult.length; i++){
            fresult[i] = result.get(i);
        }
        return fresult;
    }
}
