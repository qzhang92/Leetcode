/*
Invert a binary tree.
Example:
Input:
     4
   /   \
  2     7
 / \   / \
1   3 6   9
Output:
     4
   /   \
  7     2
 / \   / \
9   6 3   1
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
        TreeNode left = invertTree(root.left);
        TreeNode right = invertTree(root.right);
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        return root;
    }
}

//Another solution: create a queue BFS the tree
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if(root == null) return null;
        Queue<TreeNode> result = new LinkedList<TreeNode>();
        result.add(root);
        while(!result.isEmpty()){
            TreeNode current = result.poll();
            TreeNode temp = current.right;
            current.right = current.left;
            current.left = temp;
            if(current.left != null) result.add(current.left);
            if(current.right != null) result.add(current.right);
        }
        return root;
    }
}
