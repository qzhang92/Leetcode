/*

Given an n-ary tree, return the preorder traversal of its nodes' values.

For example, given a 3-ary tree:

 



 

Return its preorder traversal as: [1,3,5,6,2,4].


*/

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        if(root == null) return new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        Stack<Node> count = new Stack<>();
        count.push(root);
        while(!count.isEmpty()){
            Node current = count.pop();
            result.add(current.val);
            if(current.children != null){
                for(int i = current.children.size() - 1; i >=0 ; i--){
                    count.push(current.children.get(i));
                }
            }
        }
        return result;
    }
}
