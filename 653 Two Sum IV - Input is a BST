/*
Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

Output: True
 

Example 2:

Input: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

Output: False
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root == null)  return false;
        Set<Integer> result = new HashSet<>();
        Stack<TreeNode> count = new Stack<>();
        count.push(root);
        while(!count.isEmpty()){
            TreeNode current = count.pop();
            int i = k - current.val;
            if(result.contains(i)){
                return true;
            }
            result.add(current.val);
            if(current.left != null){
                count.push(current.left);
            }
            if(current.right != null){
                count.push(current.right);
            }
        }
        return false;
    }
}
