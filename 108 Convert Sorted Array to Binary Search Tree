/*

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Example:
Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
 */
 
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums.length == 0 || nums == null) return null;
        TreeNode result = helper(nums, 0, nums.length - 1);
        return result;
    }
    private TreeNode helper(int[] nums, int start, int end){
        int mid = start + (end -start) / 2 + (end -start) % 2;
        TreeNode node = new TreeNode(nums[mid]); 
        if(end - start > 1){
            node.left = helper(nums, start, mid - 1);
            node.right = helper(nums, mid + 1, end);
        } else if(end == start){
            node.left = null;
            node.right = null;
        } else {
            node.left = helper(nums, start, start);
            node.right = null;
        }
        
        return node;
    }
}
