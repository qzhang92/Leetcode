/*

Given a binary tree, return all root-to-leaf paths.
Note: A leaf is a node with no children.
Example:
Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public void construct_paths(TreeNode root, String path, LinkedList<String> paths){
        if (root != null){
            path += Integer.toString(root.val);
            if(root.left == null && root.right == null){
                paths.add(path);
            }
            else{
                path += "->";
                construct_paths(root.left, path, paths);
                construct_paths(root.right, path, paths);
            }
        } 
        
    }
    public List<String> binaryTreePaths(TreeNode root) {
        LinkedList<String> result = new LinkedList();
        construct_paths(root, "", result);
        return result;
    }
}

//ArrayList is also ok. But a little slower
