/*

Given a tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  
Note:

The number of nodes in the given tree will be between 1 and 100.
Each node will have a unique integer value from 0 to 1000.

*/

/** I have no clue how the answer should be for a binary tree. The below answer is just for BST **/

**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode increasingBST(TreeNode root) {
        if(root == null) return root;
        List<Integer> array = new ArrayList<>();
        helper(root, array);
        TreeNode con = new TreeNode(array.get(0));
        TreeNode ans = con;
        for(int i = 1; i < array.size(); i++){
            con.left = null;
            con.right = new TreeNode(array.get(i));
            con = con.right;
        }
        return ans;
    }
    private void helper(TreeNode root, List<Integer> array){
        if(root == null) return;
        helper(root.left, array);
        array.add(root.val);
        helper(root.right, array);
    }
}
