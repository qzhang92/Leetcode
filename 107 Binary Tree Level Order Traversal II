/*

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Queue<TreeNode> que = new LinkedList<TreeNode>();
        que.offer(root);
        while(!que.isEmpty()){
            List<Integer> count = new ArrayList<Integer>();
            int size = que.size();
            for(int i = 0; i < size; i++){
                TreeNode head = que.poll();
                count.add(head.val);
                if(head.left != null){
                    que.offer(head.left);
                }
                if(head.right != null){
                    que.offer(head.right);
                }
            }
            result.add(count);
        }
        Collections.reverse(result);
        return result;
    }
}
